version: "2.4"

services:

  configuration-service:
    depends_on:
      kafka1:
        condition: service_started
    healthcheck:
      #curl any config for testing
      test: curl -sL -w "%{http_code}\\n" "${SPRING_CLOUD_CONFIG_URL}/discovery-service.yml" -o /dev/null | grep -q '200' && echo '1'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      - SPRING_CLOUD_CONFIG_GIT_URL=${SPRING_CLOUD_CONFIG_GIT_URL}
      - SPRING_CLOUD_CONFIG_GIT_USERNAME=${SPRING_CLOUD_CONFIG_GIT_USERNAME}
      - SPRING_CLOUD_CONFIG_GIT_PASSWORD=${SPRING_CLOUD_CONFIG_GIT_PASSWORD}
      - SPRING_CLOUD_CONFIG_ENCRYPTION_KEY=${SPRING_CLOUD_CONFIG_ENCRYPTION_KEY}
      - SPRING_CLOUD_EUREKA_URL=${SPRING_CLOUD_EUREKA_URL}
      - SERVER_PORT=${SPRING_CLOUD_CONFIG_PORT}

  discovery-service:
    depends_on:
      configuration-service:
        condition: service_healthy
      kafka1:
        condition: service_started
    environment:
      - SPRING_CLOUD_CONFIG_URL=${SPRING_CLOUD_CONFIG_URL}
      - SPRING_CLOUD_EUREKA_URL=${SPRING_CLOUD_EUREKA_URL}
      - SERVER_PORT=${SPRING_CLOUD_EUREKA_PORT}

  gateway-service:
    depends_on:
      configuration-service:
        condition: service_healthy
      kafka1:
        condition: service_started
    environment:
      - SPRING_CLOUD_CONFIG_URL=${SPRING_CLOUD_CONFIG_URL}
      - SPRING_CLOUD_EUREKA_URL=${SPRING_CLOUD_EUREKA_URL}
      - SERVER_PORT=${GATEWAY_SERVICE_PORT}
      - FRONTEND_URL=${FRONTEND_URL}

  authorization-service:
    depends_on:
      configuration-service:
        condition: service_healthy
      auth-redis:
        condition: service_healthy
      auth-postgres:
        condition: service_healthy
      kafka1:
        condition: service_started
    environment:
      - SPRING_CLOUD_CONFIG_URL=${SPRING_CLOUD_CONFIG_URL}
      - SPRING_CLOUD_EUREKA_URL=${SPRING_CLOUD_EUREKA_URL}
      - REDIS_HOST=${AUTH_SERVICE_REDIS_HOST}
      - REDIS_PORT=${AUTH_SERVICE_REDIS_PORT}
      - REDIS_PASSWORD=${AUTH_SERVICE_REDIS_PASSWORD}
      - POSTGRES_CONNECTION_URL=${AUTH_SERVICE_POSTGRES_CONNECTION_URL}
      - POSTGRES_USER=${AUTH_SERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${AUTH_SERVICE_POSTGRES_PASSWORD}
      - KAFKA_BROKERS_URLS=${KAFKA_BROKERS_URLS}
      - IPSTACK_ACCESS_KEY=${AUTH_SERVICE_IPSTACK_ACCESS_KEY}
      - SERVER_PORT=${AUTH_SERVICE_PORT}
      - AES_KEY=${AUTH_SERVICE_AES_KEY}

  auth-redis:
    image: redis:5.0.6
    command: redis-server --requirepass ${AUTH_SERVICE_REDIS_PASSWORD}
    restart: always
    sysctls:
      net.core.somaxconn: '511'
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -h ${AUTH_SERVICE_REDIS_HOST} -p ${AUTH_SERVICE_REDIS_PORT} -a ${AUTH_SERVICE_REDIS_PASSWORD} --no-auth-warning ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - ${AUTH_SERVICE_REDIS_VOLUME}

  auth-postgres:
    image: postgres:11.5
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTH_SERVICE_POSTGRES_USER} -d ${AUTH_SERVICE_POSTGRES_DB} -h auth-postgres -p 5432"]
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      - POSTGRES_PASSWORD=${AUTH_SERVICE_POSTGRES_PASSWORD}
      - POSTGRES_USER=${AUTH_SERVICE_POSTGRES_USER}
      - POSTGRES_DB=${AUTH_SERVICE_POSTGRES_DB}
    volumes:
      - ${AUTH_SERVICE_POSTGRES_VOLUME}

  personal-accounts-postgres:
    image: postgres:11.5
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PERSONAL_ACCOUNTS_SERVICE_POSTGRES_USER} -d ${PERSONAL_ACCOUNTS_SERVICE_POSTGRES_DB} -h personal-accounts-postgres -p 5432"]
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      - POSTGRES_PASSWORD=${PERSONAL_ACCOUNTS_SERVICE_POSTGRES_PASSWORD}
      - POSTGRES_USER=${PERSONAL_ACCOUNTS_SERVICE_POSTGRES_USER}
      - POSTGRES_DB=${PERSONAL_ACCOUNTS_SERVICE_POSTGRES_DB}
    volumes:
      - ${PERSONAL_ACCOUNTS_SERVICE_POSTGRES_VOLUME}

  personal-accounts-redis:
    image: redis:5.0.6
    command: redis-server --requirepass ${PERSONAL_ACCOUNTS_SERVICE_REDIS_PASSWORD}
    restart: always
    sysctls:
      net.core.somaxconn: '511'
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -h ${PERSONAL_ACCOUNTS_SERVICE_REDIS_HOST} -p ${PERSONAL_ACCOUNTS_SERVICE_REDIS_PORT} -a ${PERSONAL_ACCOUNTS_SERVICE_REDIS_PASSWORD} --no-auth-warning ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - ${PERSONAL_ACCOUNTS_SERVICE_REDIS_VOLUME}

  personal-accounts-service:
    depends_on:
      configuration-service:
        condition: service_healthy
      personal-accounts-postgres:
        condition: service_healthy
      personal-accounts-redis:
        condition: service_healthy
      kafka1:
        condition: service_started
    environment:
      - SPRING_CLOUD_CONFIG_URL=${SPRING_CLOUD_CONFIG_URL}
      - SPRING_CLOUD_EUREKA_URL=${SPRING_CLOUD_EUREKA_URL}
      - POSTGRES_CONNECTION_URL=${PERSONAL_ACCOUNTS_SERVICE_POSTGRES_CONNECTION_URL}
      - POSTGRES_USER=${PERSONAL_ACCOUNTS_SERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${PERSONAL_ACCOUNTS_SERVICE_POSTGRES_PASSWORD}
      - REDIS_HOST=${PERSONAL_ACCOUNTS_SERVICE_REDIS_HOST}
      - REDIS_PORT=${PERSONAL_ACCOUNTS_SERVICE_REDIS_PORT}
      - REDIS_PASSWORD=${PERSONAL_ACCOUNTS_SERVICE_REDIS_PASSWORD}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - KAFKA_BROKERS_URLS=${KAFKA_BROKERS_URLS}
      - AES_KEY=${PERSONAL_ACCOUNTS_SERVICE_AES_KEY}
      - OAUTH2_CLIENT_SECRET=${PERSONAL_ACCOUNTS_SERVICE_OAUTH2_CLIENT_SECRET}
      - SERVER_PORT=${PERSONAL_ACCOUNTS_SERVICE_PORT}

  email-redis:
    image: redis:5.0.6
    command: redis-server --requirepass ${EMAIL_SERVICE_REDIS_PASSWORD}
    restart: always
    sysctls:
      net.core.somaxconn: '511'
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -h ${EMAIL_SERVICE_REDIS_HOST} -p ${EMAIL_SERVICE_REDIS_PORT} -a ${EMAIL_SERVICE_REDIS_PASSWORD} --no-auth-warning ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - ${EMAIL_SERVICE_REDIS_VOLUME}

  email-service:
    depends_on:
      configuration-service:
        condition: service_healthy
      email-redis:
        condition: service_healthy
      kafka1:
        condition: service_started
    environment:
      - SPRING_CLOUD_CONFIG_URL=${SPRING_CLOUD_CONFIG_URL}
      - SPRING_CLOUD_EUREKA_URL=${SPRING_CLOUD_EUREKA_URL}
      - KAFKA_BROKERS_URLS=${KAFKA_BROKERS_URLS}
      - REDIS_HOST=${EMAIL_SERVICE_REDIS_HOST}
      - REDIS_PORT=${EMAIL_SERVICE_REDIS_PORT}
      - REDIS_PASSWORD=${EMAIL_SERVICE_REDIS_PASSWORD}
      - FRONTEND_URL=${FRONTEND_URL}
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - SERVER_PORT=${EMAIL_SERVICE_PORT}

  zookeeper1:
    image: bitnami/zookeeper:3.6.1
    restart: always
    healthcheck:
      test: ["CMD-SHELL", 'zkServer.sh status | grep -E "follower|leader|standalone"']
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      - ZOO_SERVERS=zookeeper1:2888:3888
    volumes:
      - ${ZOOKEPEER1_VOLUME}

  kafka1:
    image: bitnami/kafka:2.5.0
    depends_on:
      - zookeeper1
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper1:2181
    volumes:
      - ${KAFKA1_DATA_VOLUME}