version: "2.4"
services:

  configuration-service:
    ports:
      - "8088:8088"
    build:
      context: ./configurationService
      dockerfile: docker/Dockerfile
      target: run
    depends_on:
      kafka2:
        condition: service_healthy
    healthcheck:
      test: curl http://configuration-service:8088 || echo 1
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      - SPRING_CLOUD_CONFIG_GIT_URL=${SPRING_CLOUD_CONFIG_GIT_URL}
      - SPRING_CLOUD_CONFIG_GIT_USERNAME=${SPRING_CLOUD_CONFIG_GIT_USERNAME}
      - SPRING_CLOUD_CONFIG_GIT_PASSWORD=${SPRING_CLOUD_CONFIG_GIT_PASSWORD}
      - SPRING_CLOUD_CONFIG_ENCRYPTION_KEY=${SPRING_CLOUD_CONFIG_ENCRYPTION_KEY}
      - SPRING_CLOUD_EUREKA_URL=${SPRING_CLOUD_EUREKA_URL}

  discovery-service:
    ports:
      - "8761:8761"
    build:
      context: ./discoveryService
      dockerfile: docker/Dockerfile
      target: run
    depends_on:
      configuration-service:
        condition: service_healthy
      kafka2:
        condition: service_healthy
    environment:
      - SPRING_CLOUD_CONFIG_URL=${SPRING_CLOUD_CONFIG_URL}
      - SPRING_CLOUD_EUREKA_URL=${SPRING_CLOUD_EUREKA_URL}

  gateway-service:
    ports:
      - "8887:8887"
    build:
      context: ./gatewayService
      dockerfile: docker/Dockerfile
      target: run
    depends_on:
      configuration-service:
        condition: service_healthy
      kafka2:
        condition: service_healthy
    environment:
      - SPRING_CLOUD_CONFIG_URL=${SPRING_CLOUD_CONFIG_URL}
      - SPRING_CLOUD_EUREKA_URL=${SPRING_CLOUD_EUREKA_URL}

  authorization-service:
    ports:
      - "8888:8888"
    build:
      context: ./authorizationService
      dockerfile: docker/Dockerfile
      target: run
    depends_on:
      configuration-service:
        condition: service_healthy
      auth-redis:
        condition: service_healthy
      auth-postgres:
        condition: service_healthy
      kafka2:
        condition: service_healthy
    environment:
      - SPRING_CLOUD_CONFIG_URL=${SPRING_CLOUD_CONFIG_URL}
      - SPRING_CLOUD_EUREKA_URL=${SPRING_CLOUD_EUREKA_URL}
      - REDIS_HOST=${AUTH_SERVICE_REDIS_HOST}
      - REDIS_PORT=${AUTH_SERVICE_REDIS_PORT}
      - REDIS_PASSWORD=${AUTH_SERVICE_REDIS_PASSWORD}
      - POSTGRES_CONNECTION_URL=${AUTH_SERVICE_POSTGRES_CONNECTION_URL}
      - POSTGRES_USER=${AUTH_SERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${AUTH_SERVICE_POSTGRES_PASSWORD}

  auth-redis:
    ports:
      - "5001:6379"
    image: redis:5.0.6
    command: redis-server --requirepass ${AUTH_SERVICE_REDIS_PASSWORD}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -h auth-redis -p 6379 -a ${AUTH_SERVICE_REDIS_PASSWORD} --no-auth-warning ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - C:\Users\statk\.docker-data\auth-redis:/data

  auth-postgres:
    ports:
      - "5003:5432"
    image: postgres:11.5
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTH_SERVICE_POSTGRES_USER} -d ${AUTH_SERVICE_POSTGRES_DB} -h auth-postgres -p 5432"]
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      - POSTGRES_PASSWORD=${AUTH_SERVICE_POSTGRES_PASSWORD}
      - POSTGRES_USER=${AUTH_SERVICE_POSTGRES_USER}
      - POSTGRES_DB=${AUTH_SERVICE_POSTGRES_DB}
    volumes:
      - auth-postgres:/var/lib/postgresql/data

  user-postgres:
    ports:
      - "5000:5432"
    image: postgres:11.5
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_SERVICE_POSTGRES_USER} -d ${USER_SERVICE_POSTGRES_DB} -h user-postgres -p 5432"]
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      - POSTGRES_PASSWORD=${USER_SERVICE_POSTGRES_PASSWORD}
      - POSTGRES_USER=${USER_SERVICE_POSTGRES_USER}
      - POSTGRES_DB=${USER_SERVICE_POSTGRES_DB}
    volumes:
      - user-postgres:/var/lib/postgresql/data

  user-service:
    ports:
      - "8889:8889"
    build:
      context: ./userService
      dockerfile: docker/Dockerfile
      target: run
    depends_on:
      configuration-service:
        condition: service_healthy
      user-postgres:
        condition: service_healthy
      kafka2:
        condition: service_healthy
    environment:
      - SPRING_CLOUD_CONFIG_URL=${SPRING_CLOUD_CONFIG_URL}
      - SPRING_CLOUD_EUREKA_URL=${SPRING_CLOUD_EUREKA_URL}
      - POSTGRES_CONNECTION_URL=${USER_SERVICE_POSTGRES_CONNECTION_URL}
      - POSTGRES_USER=${USER_SERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${USER_SERVICE_POSTGRES_PASSWORD}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}

  zookeeper1:
    image: bitnami/zookeeper:3.5.6
    restart: always
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", 'zkServer.sh status | grep -E "follower|leader|standalone"']
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      - ZOO_SERVER_ID=1
      - ZOO_SERVERS=zookeeper1:2888:3888
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - C:\Users\statk\.docker-data\zookeeper1\data:/bitnami/zookeeper

  kafka1:
    build: kafka
    depends_on:
      zookeeper1:
        condition: service_healthy
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD-SHELL", "/bin/kafka-healthcheck.sh"]
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ADVERTISED_HOST_NAME=host.docker.internal
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper1:2181
    volumes:
      - C:\Users\statk\.docker-data\kafka1\data:/var/lib/kafka/data

  kafka2:
    build: kafka
    depends_on:
      kafka1:
        condition: service_healthy
    ports:
      - "9093:9092"
    healthcheck:
      test: ["CMD-SHELL", "/bin/kafka-healthcheck.sh"]
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      - KAFKA_BROKER_ID=2
      - KAFKA_ADVERTISED_HOST_NAME=host.docker.internal
      - KAFKA_ADVERTISED_PORT=9093
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper1:2181
    volumes:
      - C:\Users\statk\.docker-data\kafka2\data:/var/lib/kafka/data

volumes:
  auth-postgres:
    external: true
  user-postgres:
    external: true